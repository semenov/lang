#!/usr/bin/env node

var peg = require('pegjs');
var cg = require('escodegen');
var fs = require('fs');
var _ =require('underscore');
var rules = fs.readFileSync('lang.pegjs', 'utf-8');
var programFile = process.argv[2] || 'program.txt';
var programCode = fs.readFileSync(programFile, 'utf-8');
var util = require('util');
var q = require('kew');

console.log('=== Program ===', '\n');
console.log(programCode, '\n\n');

var parser = peg.buildParser(rules);
var context = {};

// try {
	var ast = parser.parse(programCode);

	console.log('=== Syntax tree ===', '\n');
	console.log(util.inspect(ast, { depth: null, colors: true }));
	console.log('\n');

	console.log('=== Output ===', '\n');

	evaluate(ast).then(function() {
		console.log('=== Context ===', '\n');
		console.log(util.inspect(context, { depth: null, colors: true }));
		console.log('\n');
	}).fail(function(e) {
		console.log('=== Error ===', '\n');
		console.log(util.inspect(e, { depth: null, colors: true }));
	});

// } catch (e) {
// 	console.log('=== Error ===', '\n');
// 	console.log(util.inspect(e, { depth: null, colors: true }));
// }

function resolve() {
	var defer = q.defer();
	var evaledArgs = _.map(arguments, evaluate);
	q.all(evaledArgs).then(function(results) {
		defer.resolve.apply(defer, results);
	}).fail(defer.reject);

	return defer.promise;
}

function resolveSerial(instructions) {
	if (_.size(instructions) > 0) {
		var result = evaluate(_.first(instructions));
		_.each(_.rest(instructions), function(instruction) {
			result = result.then(function() {
				return evaluate(instruction);
			});
		});
		return result;
	} else {
		q.resolve(null);
	}

}


function evaluate(node) {
	if (node.type == 'Program') {
		return resolveSerial(node.instructions);
	}

	if (node.type == 'String') {
		return q.resolve({
			type: node.type,
			value: node.value
		});
	}

	if (node.type == 'Int') {
		return q.resolve({
			type: node.type,
			value: node.value
		});
	}

	if (node.type == 'Float') {
		return q.resolve({
			type: node.type,
			value: node.value
		});
	}

	if (node.type == 'Bool') {
		return q.resolve({
			type: node.type,
			value: node.value
		});
	}

	if (node.type == 'Array') {
		return q.resolve({
			type: node.type,
			items: node.items
		});
	}

	if (node.type == 'Variable') {
		if (!_.has(context, node.name)) {
			q.reject({
				name: 'UnknownVariable',
				line: node.line,
				data: node
			});
		}

		var value = context[node.name].value;

		return q.resolve(_.omit(value, 'line'));
	}

	if (node.type == 'BinaryOperation' && node.operator == '==') {
		return resolve(node.left, node.right).then(function(left, right) {
			return {
				type: 'Bool',
				value: left.type == right.type && left.value == right.value
			};
		});
	}

	if (node.type == 'BinaryOperation' && node.operator == '!=') {
		return resolve(node.left, node.right).then(function(left, right) {
			return {
				type: 'Bool',
				value: left.type != right.type || left.value != right.value
			};
		});
	}

	if (node.type == 'BinaryOperation' && node.operator == '&&') {
		return resolve(node.left, node.right).then(function(left, right) {
			if (left.type != 'Bool' || right.type != 'Bool') {
				throw {
					name: 'TypeMismatch',
					line: node.line,
					data: node
				};
			}

			return {
				type: 'Bool',
				value: left.value && right.value
			};
		});
	}

	if (node.type == 'BinaryOperation' && node.operator == '||') {
		return resolve(node.left, node.right).then(function(left, right) {

			if (left.type != 'Bool' || right.type != 'Bool') {
				throw {
					name: 'TypeMismatch',
					line: node.line,
					data: node
				};
			}

			return {
				type: 'Bool',
				value: left.value || right.value
			};
		});
	}

	function arithmeticOperation(node, fn) {
		return resolve(node.left, node.right).then(function(left, right) {
			var typesOk = (left.type == 'Int' || left.type == 'Float') &&
				(right.type == 'Int' || right.type == 'Float');

			if (!typesOk) {
				throw {
					name: 'TypeMismatch',
					line: node.line,
					data: node
				};
			}

			var returnType;

			if (left.type == 'Float' || right.type == 'Float') {
				returnType = 'Float';
			} else {
				returnType = 'Int';
			}

			return {
				type: returnType,
				value: fn(left.value, right.value)
			};
		});
	}

	if (node.type == 'BinaryOperation' && node.operator == '+') {
		return arithmeticOperation(node, function(left, right) { return left + right });
	}

	if (node.type == 'BinaryOperation' && node.operator == '-') {
		return arithmeticOperation(node, function(left, right) { return left - right });
	}

	if (node.type == 'BinaryOperation' && node.operator == '*') {
		return arithmeticOperation(node, function(left, right) { return left * right });
	}


	function comparisonOperation(node, fn) {
		return resolve(node.left, node.right).then(function(left, right) {
			var typesOk = (left.type == 'Int' || left.type == 'Float') &&
				(right.type == 'Int' || right.type == 'Float');

			if (!typesOk) {
				throw {
					name: 'TypeMismatch',
					line: node.line,
					data: node
				};
			}

			return {
				type: 'Bool',
				value: fn(left.value, right.value)
			};
		});
	}

	if (node.type == 'BinaryOperation' && node.operator == '>') {
		return comparisonOperation(node, function(left, right) { return left > right });
	}

	if (node.type == 'BinaryOperation' && node.operator == '>=') {
		return comparisonOperation(node, function(left, right) { return left >= right });
	}

	if (node.type == 'BinaryOperation' && node.operator == '<') {
		return comparisonOperation(node, function(left, right) { return left < right });
	}

	if (node.type == 'BinaryOperation' && node.operator == '<=') {
		return comparisonOperation(node, function(left, right) { return left <= right });
	}

	if (node.type == 'If') {
		return evaluate(node.condition).then(function(condition) {
			if (condition.type != 'Bool') {
				throw {
					name: 'TypeMismatch',
					line: node.line,
					data: node
				};
			}

			var chosenNode = (condition.value ? node.trueCase : node.falseCase);

			return evaluate(chosenNode);
		});
	}


	// if (node.type == 'While') {
	// 	while (true) {
	// 		var condition = evaluate(node.condition);
	// 		if (condition.type != 'Bool') {
	// 			throw {
	// 				name: 'TypeMismatch',
	// 				line: node.line,
	// 				data: node
	// 			};
	// 		}

	// 		if (condition.value) {
	// 			evaluate(node.body);
	// 		} else {
	// 			break;
	// 		}
	// 	}

	// 	return null;
	// }

	/////
	if (node.type == 'Block') {
		return resolveSerial(node.instructions);
	}

	if (node.type == 'Use') {

		var mod = require('./modules/' + node.module);

		context[node.module] = {
			type: null,
			value: {
				type: 'Module',
				module: mod
			}
		};

		return q.resolve(null);
	}

	if (node.type == 'PropertyAccess') {
		return evaluate(node.object).then(function(value) {

			var accessor = _.first(node.accessors);
			if (accessor.type == 'CallExpression') {
				var propertyName = accessor.target.name;
				if (value.type == 'Module') {
					var mod = value.module;
					var fn = mod.functions[propertyName].fn;
					var promises = _.map(accessor.arguments, evaluate);
					return q.all(promises).then(function(args) {
						var result = fn.apply(null, args);
						return result;
					});
				}
			} else {
				return q.resolve(null)
			}

			// _.each(node.accessors, function(accessor) {
			// 	if (accessor.type == 'CallExpression') {
			// 		var propertyName = accessor.target.name;
			// 		if (value.type == 'Module') {
			// 			var mod = value.module;
			// 			var fn = mod.functions[propertyName].fn;
			// 			var args = _.map(accessor.arguments, evaluate);
			// 			value = fn.apply(null, args);
			// 		}
			// 	}
			// });
		});
	}



	if (node.type == 'VariableDeclaration') {
		var type = node.variableType;
		return evaluate(node.value).then(function(value) {
			if (type && value && type != value.type) {
				throw {
					name: 'TypeMismatch',
					line: node.line,
					data: node
				};
			}

			context[node.variable] = {
				type: node.variableType,
				value: value
			};

			return value;
		});
	}

	if (node.type == 'VariableAssignment') {
		var variableName = node.variable.name;
		return evaluate(node.value).then(function(value) {
			if (!_.has(context, variableName)) {
				throw {
					name: 'UnknownVariable',
					line: node.line,
					data: node
				};
			}

			var variable = context[variableName];

			if (variable.type && variable.type != value.type) {
				throw {
					name: 'TypeMismatch',
					line: node.line,
					data: node
				};
			}

			variable.value = value;

			return value;
		});
	}

	return q.resolve(null);
}